name: Upload from Artifacts

on:
  workflow_dispatch:
    inputs:
      artifact_pattern:
        description: 'Artifact name pattern (e.g., "custom-designs" or leave empty for all)'
        required: false
        default: '*-designs-*'
        type: string
      dry_run:
        description: 'Test without uploading'
        required: false
        default: false
        type: boolean

env:
  PRINTFUL_API_KEY: ${{ secrets.PRINTFUL_API_KEY }}
  PRINTFUL_STORE_ID: ${{ secrets.PRINTFUL_STORE_ID }}
  SHOPIFY_STORE: ${{ secrets.SHOPIFY_STORE }}
  SHOPIFY_ACCESS_TOKEN: ${{ secrets.SHOPIFY_ACCESS_TOKEN }}
  MARKUP_PERCENT: ${{ secrets.MARKUP_PERCENT || '1.4' }}

jobs:
  upload:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install --upgrade certifi requests[security]
    
    - name: List available artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          console.log('Available artifacts:');
          let designArtifacts = 0;
          for (const artifact of artifacts.data.artifacts) {
            if (artifact.name.includes('designs')) {
              console.log(`- ${artifact.name} (created: ${artifact.created_at})`);
              designArtifacts++;
            }
          }
          
          if (designArtifacts === 0) {
            console.log('No design artifacts found!');
          }
          
          return designArtifacts;
    
    - name: Download ALL design artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Create directory for designs
          const downloadDir = 'downloaded_designs';
          if (!fs.existsSync(downloadDir)) {
            fs.mkdirSync(downloadDir);
          }
          
          // Get all artifacts
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          // Filter and download design artifacts
          let downloadCount = 0;
          for (const artifact of artifacts.data.artifacts) {
            if (artifact.name.match(/.*designs.*/)) {
              console.log(`Downloading ${artifact.name}...`);
              
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: 'zip'
              });
              
              const artifactPath = path.join(downloadDir, `${artifact.name}.zip`);
              fs.writeFileSync(artifactPath, Buffer.from(download.data));
              downloadCount++;
            }
          }
          
          console.log(`Downloaded ${downloadCount} artifacts`);
    
    - name: Extract all artifacts
      run: |
        mkdir -p all_designs
        cd downloaded_designs
        
        # Extract all zip files
        for zip in *.zip; do
          echo "Extracting $zip..."
          unzip -q -o "$zip" -d ../all_designs/
        done
        
        cd ../all_designs
        
        # Count designs
        echo "Found designs:"
        ls -la design_*.png 2>/dev/null || echo "No design files found"
        
        # Move all designs to root
        find . -name "design_*.png" -type f -exec mv {} ../ \;
        
        cd ..
        echo "Total design files: $(ls design_*.png 2>/dev/null | wc -l)"
    
    - name: Run upload manager
      env:
        REQUESTS_CA_BUNDLE: /etc/ssl/certs/ca-certificates.crt
        SSL_CERT_FILE: /etc/ssl/certs/ca-certificates.crt
      run: |
        # Check if we have any designs
        if ! ls design_*.png 1> /dev/null 2>&1; then
          echo "❌ No design files found after extraction!"
          exit 1
        fi
        
        echo "📁 Processing $(ls design_*.png | wc -l) design files"
        
        # Run upload manager
        if [ "${{ inputs.dry_run }}" = "true" ]; then
          python upload_manager.py --dry-run
        else
          python upload_manager.py
        fi
    
    - name: Upload tracker
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: upload-tracker-${{ github.run_number }}
        path: |
          upload_tracker.json
        retention-days: 90
    
    - name: Create summary
      if: always()
      run: |
        echo "## Upload from Artifacts Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Show what we found
        echo "### Design Files Processed" >> $GITHUB_STEP_SUMMARY
        if ls design_*.png 1> /dev/null 2>&1; then
          echo "Found $(ls design_*.png | wc -l) design files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>File List</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          ls -la design_*.png >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ No design files found" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Show upload results
        if [ -f upload_tracker.json ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Upload Statistics" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          jq '.stats' upload_tracker.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
